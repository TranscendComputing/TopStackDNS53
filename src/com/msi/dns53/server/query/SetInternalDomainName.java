/*
 * TopStack (c) Copyright 2012-2013 Transcend Computing, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.msi.dns53.server.query;

import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.slf4j.Logger;

import com.msi.dns53.model.DNS53ResourceRecord;
import com.msi.dns53.server.AccessMySQL;
import com.msi.dns53.server.DNS53Constants;
import com.msi.dns53.server.RequestHandler;
import com.msi.tough.core.Appctx;
import com.msi.tough.core.HibernateUtil;
import com.msi.tough.core.HibernateUtil.Operation;
import com.msi.tough.model.AccountBean;
import com.msi.tough.query.QueryUtil;
import com.msi.tough.query.UnsecuredAction;
import com.msi.tough.utils.AccountUtil;

public class SetInternalDomainName extends UnsecuredAction {
    private final static Logger logger = Appctx
            .getLogger(SetInternalDomainName.class.getName());

    @Override
    public String process0(Session session, HttpServletRequest req,
            HttpServletResponse resp, Map<String, String[]> map)
            throws Exception {
        logger.debug(SetInternalDomainName.class.getName()
                + " has been called!");

        String hostname = QueryUtil.getString(map, "Hostname");
        logger.debug("Hostname: " + hostname);

        int dotIndex = hostname.indexOf('.');
        int lastDotIndex = hostname.lastIndexOf('.');
        String domainName = hostname.substring(dotIndex + 1, hostname.length());
        if (dotIndex == lastDotIndex) {
            domainName = hostname;
        }
        logger.debug("DomainName: " + domainName);

        final AccountBean system = AccountUtil.readAccount(session, 1L);
        final AccessMySQL sqlaccess = AccessMySQL.getInstance();
        final String name = domainName;
        final String nameDot = name + ".";
        final String callerRef = UUID.randomUUID().toString().replace("-", "");
        final String comment = "This is autogenerated through TopStack installation process.";

        List<String> zoneInfo = HibernateUtil
                .withNewSession(new Operation<List<String>>() {
                    @Override
                    public List<String> ex(final Session s,
                            final Object... args) throws Exception {
                        return sqlaccess.createHostedZone(s, name, callerRef,
                                comment, system.getId());
                    }
                });

        String hzId = zoneInfo.get(0);
        if (hzId.equals("DUPLICATE_NAME")) {
            logger.debug("The zone already exists! Proceed to the next step!");
            hzId = sqlaccess.getZoneId(nameDot);
        } else {
            RequestHandler.writeChange(sqlaccess, DNS53Constants.PENDING,
                    (new Date()).toString(), zoneInfo.get(1), "CREATE");
        }

        String ipAddress = QueryUtil.getString(map, "IP");
        logger.debug("IP: " + ipAddress);
        String cnamePrefix = QueryUtil.getString(map, "CNAMEPREFIX");
        logger.debug("CNAMEPREFIX: " + cnamePrefix);

        if (ipAddress != null) {
            createARecord(session, hostname, ipAddress, system, sqlaccess,
                    nameDot, hzId);
        } else if (cnamePrefix != null) {
            createCNAMERecord(session, hostname, cnamePrefix, system,
                    sqlaccess, nameDot, hzId);
        }
        return "DONE";
    }

    public void createARecord(Session session, String hostname,
            String ipAddress, final AccountBean system,
            final AccessMySQL sqlaccess, final String nameDot, String hzId) {
        String hostnameDot = hostname + ".";
        String type = "A";
        String value = ipAddress;
        int ttl = 900;

        boolean recordExists = sqlaccess.recordExists(session, hzId,
                hostnameDot, type, value);
        if (!recordExists) {
            logger.debug("Record has not been found; creating a new one for the given hostname.");
            sqlaccess.addResourceRecord(hzId, hostname, ttl, type, value,
                    system.getId());
            DNS53ResourceRecord newRecord = new DNS53ResourceRecord();
            newRecord.setZoneId(hzId);
            newRecord.setZoneName(nameDot);
            newRecord.setName(hostnameDot);
            newRecord.setTtl(ttl);
            newRecord.setRdtype(type);
            newRecord.setRdata(value);
            session.save(newRecord);

            RequestHandler.writeChange(sqlaccess, "INSYNC",
                    (new Date()).toString(), "RRSET", "RRSET");
        } else {
            logger.debug("Record with the same name and value already exists!");
        }
    }

    public void createCNAMERecord(Session session, String hostname,
            String cnamePrefix, final AccountBean system,
            final AccessMySQL sqlaccess, final String nameDot, String hzId) {
        String hostnameDot = cnamePrefix.toLowerCase() + "-" + hostname + ".";
        String type = "CNAME";
        int ttl = 900;

        boolean recordExists = sqlaccess.recordExists(session, hzId,
                hostnameDot, type, hostname);
        if (!recordExists) {
            logger.debug("Record has not been found; creating a new one for the given hostname.");
            sqlaccess.addResourceRecord(hzId, cnamePrefix.toLowerCase() + "-"
                    + hostname, ttl, type, hostname, system.getId());
            DNS53ResourceRecord newRecord = new DNS53ResourceRecord();
            newRecord.setZoneId(hzId);
            newRecord.setZoneName(nameDot);
            newRecord.setName(hostnameDot);
            newRecord.setTtl(ttl);
            newRecord.setRdtype(type);
            newRecord.setRdata(hostname + ".");
            session.save(newRecord);

            RequestHandler.writeChange(sqlaccess, "INSYNC",
                    (new Date()).toString(), "RRSET", "RRSET");
        } else {
            logger.debug("Record with the same name and value already exists!");
        }
    }
}
